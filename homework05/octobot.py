import json
import re
from datetime import datetime, timedelta
from urllib.parse import urlparse

import gspread  # type: ignore
import pandas as pd  # type: ignore
import requests  # type: ignore
import telebot  # type: ignore

bot = telebot.TeleBot("6099153394:AAFJyP18BbGf0FMTPUZt3I1isr5wQt51JTE")
USEFUL_ARG = []
TABLE_CONNECTED = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è-—Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã


def is_valid_date(date: str = "01/01/00", divider: str = "/") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞:
    - –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ —Ç–µ–∫—É—â–µ–π
    - –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ, —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥
    - –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º
    - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—è–∑–∞–Ω –≤–≤–æ–¥–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–ª–µ—à)"""
    if divider not in date:
        return False
    dmy = date.split(divider)
    if len(dmy) < 3:
        return False
    day, month, year = list(map(int, dmy))
    today = list(map(int, datetime.today().date().strftime("20%year/%month/%day").split(sep="/")))
    today = datetime(today[0], today[1], today[2])  # type: ignore
    try:
        date = datetime(2000 + year, month, day)  # type: ignore
    except ValueError:
        return False
    period = date - today  # type: ignore
    return period.days < 365 and date >= today  # type: ignore


def is_valid_url(url: str = "") -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—á–∞—è"""
    try:
        parsed_url = urlparse(url)
        if not parsed_url.scheme:
            url = "http://" + url
        response = requests.get(url)
        if response.status_code == 200:
            return True
    except requests.exceptions.ConnectionError:
        return False
    return False


def convert_date(date: str = "01/01/00"):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime"""
    divider = date[2]
    dates = date.split(divider)
    if len(dates[-1]) == 4:
        return datetime.strptime(date, "%d" + divider + "%m" + divider + "%Y")
    elif len(dates[-1]) == 2:
        return datetime.strptime(date, "%d" + divider + "%m" + divider + "%y")


def connect_table(message):
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google-—Ç–∞–±–ª–∏—Ü–µ"""
    global TABLE_CONNECTED
    url = message.text
    sheet_id = url.split("/")[5]  # –ù—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å id —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ Google-—Ç–∞–±–ª–∏—Ü—É
    try:
        with open("tables.json", encoding="utf-8") as json_file:
            tables = json.load(json_file)
        title = len(tables) + 1
        tables[title] = {"url": url, "id": sheet_id}
    except FileNotFoundError:
        tables = {0: {"url": url, "id": sheet_id}}
    with open("tables.json", "w", encoding="utf-8") as json_file:
        json.dump(tables, json_file)
    TABLE_CONNECTED = True
    text = bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")
    bot.register_next_step_handler(text, start)


def access_current_sheet():
    """–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ Google-—Ç–∞–±–ª–∏—Ü–µ"""
    with open("tables.json", encoding="utf-8") as json_file:
        tables = json.load(json_file)
    sheet_id = tables[max(tables)]["id"]
    gc = gspread.service_account(filename="credentials.json")
    sh = gc.open_by_key(sheet_id)
    worksheet = sh.sheet1
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Google-—Ç–∞–±–ª–∏—Ü—É –≤ —Ç–∞–±–ª–∏—Ü—É pandas
    worksheet_values = worksheet.get_all_values()
    header = worksheet_values[0]
    data = worksheet_values[1:]
    dataframe = pd.DataFrame(data, columns=header)
    return worksheet, tables[max(tables)]["url"], dataframe


def choose_action(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    if message.text == "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google-—Ç–∞–±–ª–∏—Ü—É":
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Google-—Ç–∞–±–ª–∏—Ü—É")
        bot.register_next_step_handler(message, connect_table)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã":
        start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_markup.row("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç üÜï")
        start_markup.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        start_markup.row("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç üöÆ")
        start_markup.row("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã üóë")
        info = bot.send_message(message.chat.id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_markup)
        bot.register_next_step_handler(info, choose_subject_action)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã":
        start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_markup.row("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω üÜï")
        start_markup.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω")
        info = bot.send_message(message.chat.id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_markup)
        bot.register_next_step_handler(info, choose_deadline_action)
    elif message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ":
        deadlines_this_week(message)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë":
        clear_all(message)


def choose_subject_action(message):
    """–í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"""
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç üÜï":
        message = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ")
        bot.register_next_step_handler(message, add_subject)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        worksheet, sheet, dataframe = access_current_sheet()
        mrkp = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for element in worksheet.col_values(1)[1:]:
            mrkp.row(f"{element}")
        info = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=mrkp)
        bot.register_next_step_handler(info, update_subject)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç üöÆ":
        worksheet, sheet, dataframe = access_current_sheet()
        mrkp = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for element in worksheet.col_values(1)[1:]:
            mrkp.row(f"{element}")
        info = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=mrkp)
        bot.register_next_step_handler(info, delete_subject)
    elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã üóë":
        start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_markup.row("–î–∞")
        start_markup.row("–ù–µ—Ç")
        info = bot.send_message(
            message.chat.id,
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ?",
            reply_markup=start_markup,
        )
        bot.register_next_step_handler(info, choose_removal_option)


def choose_deadline_action(message):
    """–í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω"""
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω üÜï":
        worksheet, _, dataframe = access_current_sheet()
        mark_up = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for el in worksheet.col_values(1)[1:]:
            mark_up.row(f"{el}")
        info = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=mark_up)
        bot.register_next_step_handler(info, add_deadline)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω":
        worksheet, b, dataframe = access_current_sheet()
        mark_up = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for el in worksheet.col_values(1)[1:]:
            mark_up.row(f"{el}")
        info = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=mark_up)
        bot.register_next_step_handler(info, update_deadline)


def add_subject(message):
    """–í–Ω–æ—Å–∏–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü—É"""
    try:
        name = message.text.split()[0]
        url = message.text.split()[1]
        worksheet, _, dataframe = access_current_sheet()
        in_worksheet = False
        for i in range(2, len(worksheet.col_values(1)) + 1):
            if worksheet.cell(i, 1).value == name:
                in_worksheet = True
        if not in_worksheet:
            worksheet.append_row([name, url])
            bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
        else:
            bot.send_message(message.chat.id, "–ü—Ä–µ–¥–º–µ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
        start(message)
    except IndexError:
        info = bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
        )
        bot.register_next_step_handler(info, add_subject)


def add_subject_url(message):
    """–í–Ω–æ—Å–∏–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ Google-—Ç–∞–±–ª–∏—Ü—É"""
    worksheet, sheet, dataframe = access_current_sheet()
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
    last_row = len(sheet.get_all_values()) + 1
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
    sheet.update_cell(last_row, 1, message)
    return f"–°—Å—ã–ª–∫–∞ {message} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"


def update_subject(message):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –≤ Google-—Ç–∞–±–ª–∏—Ü–µ"""
    global USEFUL_ARG
    USEFUL_ARG = []
    USEFUL_ARG.append(message.text)
    inf = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    bot.register_next_step_handler(inf, update_subject2)


def update_subject2(message):
    global USEFUL_ARG
    try:
        name = message.text.split()[0]
        url = message.text.split()[1]
        worksheet, _, dataframe = access_current_sheet()
        ind = worksheet.find(f"{USEFUL_ARG[0]}").row
        cell_list = worksheet.range(f"A{ind}:B{ind}")
        cell_list[0].value = name
        cell_list[1].value = url
        worksheet.update_cells(cell_list)
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
    except IndexError:
        inf = bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
        )
        bot.register_next_step_handler(inf, update_subject2)
    start(message)


def delete_subject(message):
    """–£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ Google-—Ç–∞–±–ª–∏—Ü–µ"""
    global USEFUL_ARG
    worksheet, _, dataframe = access_current_sheet()
    ind = worksheet.find(f"{message.text}").row
    worksheet.delete_rows(int(ind), int(ind))
    bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
    start(message)


def delete_all_subjects(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã üóë":
        sheet, _, _ = access_current_sheet()
        subjects = sheet.range("A2:A" + str(sheet.row_count))
        for cell in subjects:
            cell.clear()
        bot.send_message(message.chat_id, "–í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã", reply_markup=markup)


def add_deadline(message):
    global USEFUL_ARG
    USEFUL_ARG = []
    USEFUL_ARG.append(message.text)
    inf = bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yy' –∏–ª–∏ 'dd.mm.yyyy' –∏–ª–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º"
    )
    bot.register_next_step_handler(inf, add_deadline2)


def add_deadline2(message):
    global USEFUL_ARG
    date = message.text
    divider = ""
    for i in range(len(date)):
        if not date[i].isdigit():
            divider = date[i]
    dates = date.split(divider)
    if not re.match(r"\d\d" + divider + r"\d\d" + divider + r"\d\d", message.text) and not re.match(
        r"\d\d" + divider + r"\d\d" + divider + r"\d\d\d\d", message.text
    ):
        info = bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yy' –∏–ª–∏ 'dd/mm/yyyy' –∏–ª–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º",
        )
        bot.register_next_step_handler(info, add_deadline2)
    else:
        try:
            if convert_date(message.text) < datetime.today():
                bot.send_message(message.chat.id, "–î–µ–¥–ª–∞–π–Ω —Å–≥–æ—Ä–µ–ª üò∞")
            else:
                worksheet, _, dataframe = access_current_sheet()
                row = worksheet.find(f"{USEFUL_ARG[0]}").row
                number = len(worksheet.row_values(row))
                dateline = ""
                if len(dates[-1]) == 4:
                    dateline = dates[0] + "/" + dates[1] + "/" + dates[2][2:]
                else:
                    dateline = dates[0] + "/" + dates[1] + "/" + dates[2]
                worksheet.update_cell(row, number + 1, dateline)
                if not worksheet.cell(1, number + 1).value:
                    num = int(worksheet.cell(1, number).value)
                    worksheet.update_cell(1, number + 1, num + 1)
                bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
                start(message)
        except:
            ins = bot.send_message(message.chat.id, "–¢–∞–∫–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            bot.register_next_step_handler(ins, add_deadline2)


def update_deadline(message):
    """–û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω"""
    global USEFUL_ARG
    USEFUL_ARG = [message.text]
    worksheet, _, dataframe = access_current_sheet()
    mark_up = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for element in worksheet.row_values(1)[2:]:
        mark_up.row(f"{element}")
    inf = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ä–∞–±–æ—Ç—ã", reply_markup=mark_up)
    bot.register_next_step_handler(inf, update_deadline2)


def update_deadline2(message):
    global USEFUL_ARG
    USEFUL_ARG.append(message.text)
    inf = bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yy' –∏–ª–∏ 'dd/mm/yyyy' –∏–ª–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º"
    )
    bot.register_next_step_handler(inf, update_deadline3)


def update_deadline3(message):
    global USEFUL_ARG
    date = message.text
    divider = ""
    for i in range(len(date)):
        if not date[i].isdigit():
            divider = date[i]
    dates = date.split(divider)
    if not re.match(r"\d\d" + divider + r"\d\d" + divider + r"\d\d", message.text) and not re.match(
        r"\d\d" + divider + r"\d\d" + divider + r"\d\d\d\d", message.text
    ):
        info = bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yy'")
        bot.register_next_step_handler(info, update_deadline3)
    else:
        try:
            if convert_date(message.text) < datetime.today():
                bot.send_message(message.chat.id, "–î–µ–¥–ª–∞–π–Ω —Å–≥–æ—Ä–µ–ª üò∞")
            else:
                worksheet, _, dataframe = access_current_sheet()
                row = worksheet.find(f"{USEFUL_ARG[0]}").row
                col = worksheet.find(f"{USEFUL_ARG[1]}").col
                dateline = ""
                if len(dates[-1]) == 4:
                    dateline = dates[0] + "/" + dates[1] + "/" + dates[2][2:]
                else:
                    dateline = dates[0] + "/" + dates[1] + "/" + dates[2]
                worksheet.update_cell(row, col, dateline)
                bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ")
                start(message)
        except:
            info = bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yyyy'",
            )
            bot.register_next_step_handler(info, update_deadline3)


def choose_subject(message):
    """–í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω"""
    global USEFUL_ARG
    USEFUL_ARG = [message.text]
    info = bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd/mm/yy' –∏–ª–∏ 'dd/mm/yyyy' –∏–ª–∏ —Å –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º"
    )
    bot.register_next_step_handler(info, add_deadline2)


def deadlines_this_week(message):
    today = datetime.today()
    week = today + timedelta(days=7)
    worksheet, _, dataframe = access_current_sheet()
    msg = ""
    for i in range(2, len(worksheet.col_values(1)) + 1):
        for deadline in worksheet.row_values(i)[2:]:
            if week >= convert_date(deadline) >= today:
                msg += f"{worksheet.cell(i, 1).value}: {deadline}\n"
    if msg == "":
        msg += "–ü–ª–∞–Ω–æ–≤ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç"
    bot.send_message(message.chat.id, msg)
    start(message)


def choose_removal_option(message):
    """–£—Ç–æ—á–Ω—è–µ–º, —Ç–æ—á–Ω–æ –ª–∏ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ"""
    if message.text == "–î–∞":
        clear_all(message)
    elif message.text == "–ù–µ—Ç":
        start(message)


def clear_all(message):
    """–£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑ Google-—Ç–∞–±–ª–∏—Ü—ã"""
    worksheet, sheet, dataframe = access_current_sheet()
    sheet.del_worksheet(worksheet)
    start(message)


@bot.message_handler(commands=["start"])
def start(message):
    global TABLE_CONNECTED
    if TABLE_CONNECTED is True:
        start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_markup.row("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
        start_markup.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã")
        start_markup.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã")
        start_markup.row("–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
        info = bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_markup)
        bot.register_next_step_handler(info, choose_action)
    else:
        start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        start_markup.row("–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google-—Ç–∞–±–ª–∏—Ü—É")
        info = bot.send_message(message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_markup)
        bot.register_next_step_handler(info, choose_action)


if __name__ == "__main__":
    bot.infinity_polling()
